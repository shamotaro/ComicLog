{"ast":null,"code":"var _jsxFileName = \"D:\\\\13.VSCode\\\\ComicLog\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { API, Storage } from 'aws-amplify';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { listNotes } from './graphql/queries';\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation } from './graphql/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormState = {\n  name: '',\n  description: ''\n}; //このコンポーネントでは、withAuthenticator コンポーネントを使用\n// このコンポーネントは、ユーザー認証フロー全体を足場にして、\n// ユーザーがサインアップ、サインイン、パスワードのリセット、\n// および多要素認証 (MFA) のサインインの確認を行えるようにします。\n// サインアウトボタンをレンダリングする AmplifySignOut コンポーネントも使用\n// APIでユーザーがメモを作成、一覧表示、削除できるようにする\n// fetchNotes - この関数は、API クラスを使用してクエリを GraphQL API に送信し、メモのリストを取得します。\n// createNote - この関数はまた、API クラスを使用して変異を GraphQL API に送信します。\n// 主な違いは、この関数では、GraphQL 変異に必要な変数を渡して、フォームデータで新しいノートを作成できることです。\n// deleteNote - createNote と同様に、この関数は変数と共に GraphQL ミューテーションを送信しますが、メモを作成する代わりにメモを削除します。\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [formData, setFormData] = useState(initialFormState);\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({\n      query: listNotes\n    });\n    setNotes(apiData.data.listNotes.items);\n  }\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({\n      query: createNoteMutation,\n      variables: {\n        input: formData\n      }\n    });\n    setNotes([...notes, formData]);\n    setFormData(initialFormState);\n  }\n\n  async function deleteNote({\n    id\n  }) {\n    const newNotesArray = notes.filter(note => note.id !== id);\n    setNotes(newNotesArray);\n    await API.graphql({\n      query: deleteNoteMutation,\n      variables: {\n        input: {\n          id\n        }\n      }\n    });\n  } // 画像のアップロードを処理\n\n\n  async function onChange(e) {\n    if (!e.target.files[0]) return;\n    const file = e.target.files[0];\n    setFormData({ ...formData,\n      image: file.name\n    });\n    await Storage.put(file.name, file);\n    fetchNotes();\n  } // メモに関連付けられている画像を取得\n\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({\n      query: listNotes\n    });\n    const notesFromAPI = apiData.data.listNotes.items;\n    await Promise.all(notesFromAPI.map(async note => {\n      if (note.image) {\n        const image = await Storage.get(note.image);\n        note.image = image;\n      }\n\n      return note;\n    }));\n    setNotes(apiData.data.listNotes.items);\n  } // 画像がメモに関連付けられている場合は、画像をローカル画像配列に追加し\n\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({\n      query: createNoteMutation,\n      variables: {\n        input: formData\n      }\n    });\n\n    if (formData.image) {\n      const image = await Storage.get(formData.image);\n      formData.image = image;\n    }\n\n    setNotes([...notes, formData]);\n    setFormData(initialFormState);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Notes App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setFormData({ ...formData,\n        'name': e.target.value\n      }),\n      placeholder: \"Note name\",\n      value: formData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setFormData({ ...formData,\n        'description': e.target.value\n      }),\n      placeholder: \"Note description\",\n      value: formData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createNote,\n      children: \"Create Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 30\n      },\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: note.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: note.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteNote(note),\n          children: \"Delete note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), note.image && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: note.image,\n          style: {\n            width: 400\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 31\n        }, this)]\n      }, note.id || note.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AmplifySignOut, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"JPBvvkw3reuBWHQ6nysTAgsogYI=\");\n\n_c = App;\nexport default _c2 = withAuthenticator(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/13.VSCode/ComicLog/src/App.js"],"names":["React","useState","useEffect","API","Storage","withAuthenticator","AmplifySignOut","listNotes","createNote","createNoteMutation","deleteNote","deleteNoteMutation","initialFormState","name","description","App","notes","setNotes","formData","setFormData","fetchNotes","apiData","graphql","query","data","items","variables","input","id","newNotesArray","filter","note","onChange","e","target","files","file","image","put","notesFromAPI","Promise","all","map","get","value","marginBottom","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { API, Storage } from 'aws-amplify';\r\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\r\nimport { listNotes } from './graphql/queries';\r\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation } from './graphql/mutations';\r\n\r\nconst initialFormState = { name: '', description: '' }\r\n\r\n//このコンポーネントでは、withAuthenticator コンポーネントを使用\r\n// このコンポーネントは、ユーザー認証フロー全体を足場にして、\r\n// ユーザーがサインアップ、サインイン、パスワードのリセット、\r\n// および多要素認証 (MFA) のサインインの確認を行えるようにします。\r\n// サインアウトボタンをレンダリングする AmplifySignOut コンポーネントも使用\r\n\r\n// APIでユーザーがメモを作成、一覧表示、削除できるようにする\r\n// fetchNotes - この関数は、API クラスを使用してクエリを GraphQL API に送信し、メモのリストを取得します。\r\n// createNote - この関数はまた、API クラスを使用して変異を GraphQL API に送信します。\r\n// 主な違いは、この関数では、GraphQL 変異に必要な変数を渡して、フォームデータで新しいノートを作成できることです。\r\n// deleteNote - createNote と同様に、この関数は変数と共に GraphQL ミューテーションを送信しますが、メモを作成する代わりにメモを削除します。\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n  const [formData, setFormData] = useState(initialFormState);\r\n\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  async function fetchNotes() {\r\n    const apiData = await API.graphql({ query: listNotes });\r\n    setNotes(apiData.data.listNotes.items);\r\n  }\r\n\r\n  async function createNote() {\r\n    if (!formData.name || !formData.description) return;\r\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\r\n    setNotes([ ...notes, formData ]);\r\n    setFormData(initialFormState);\r\n  }\r\n\r\n  async function deleteNote({ id }) {\r\n    const newNotesArray = notes.filter(note => note.id !== id);\r\n    setNotes(newNotesArray);\r\n    await API.graphql({ query: deleteNoteMutation, variables: { input: { id } }});\r\n  }\r\n\r\n  // 画像のアップロードを処理\r\n  async function onChange(e) {\r\n    if (!e.target.files[0]) return\r\n    const file = e.target.files[0];\r\n    setFormData({ ...formData, image: file.name });\r\n    await Storage.put(file.name, file);\r\n    fetchNotes();\r\n  }\r\n\r\n  // メモに関連付けられている画像を取得\r\n  async function fetchNotes() {\r\n    const apiData = await API.graphql({ query: listNotes });\r\n    const notesFromAPI = apiData.data.listNotes.items;\r\n    await Promise.all(notesFromAPI.map(async note => {\r\n      if (note.image) {\r\n        const image = await Storage.get(note.image);\r\n        note.image = image;\r\n      }\r\n      return note;\r\n    }))\r\n    setNotes(apiData.data.listNotes.items);\r\n  }\r\n\r\n  // 画像がメモに関連付けられている場合は、画像をローカル画像配列に追加し\r\n  async function createNote() {\r\n    if (!formData.name || !formData.description) return;\r\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\r\n    if (formData.image) {\r\n      const image = await Storage.get(formData.image);\r\n      formData.image = image;\r\n    }\r\n    setNotes([ ...notes, formData ]);\r\n    setFormData(initialFormState);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>My Notes App</h1>\r\n      <input\r\n        onChange={e => setFormData({ ...formData, 'name': e.target.value})}\r\n        placeholder=\"Note name\"\r\n        value={formData.name}\r\n      />\r\n      <input\r\n        onChange={e => setFormData({ ...formData, 'description': e.target.value})}\r\n        placeholder=\"Note description\"\r\n        value={formData.description}\r\n      />\r\n      <button onClick={createNote}>Create Note</button>\r\n      <div style={{marginBottom: 30}}>\r\n        {\r\n          notes.map(note => (\r\n            <div key={note.id || note.name}>\r\n              <h2>{note.name}</h2>\r\n              <p>{note.description}</p>\r\n              <button onClick={() => deleteNote(note)}>Delete note</button>\r\n              {\r\n                note.image && <img src={note.image} style={{width: 400}} />\r\n              }\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      <AmplifySignOut />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);"]},"metadata":{},"sourceType":"module"}